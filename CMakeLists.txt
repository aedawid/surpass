cmake_minimum_required (VERSION 2.8)

project (SURPASS)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "../../bin/")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "../../bin/")

set(CMAKE_VERBOSE_MAKEFILE off)
set(CMAKE_CXX_STANDARD 11)

find_package (Threads)
#find_library (SQLITE3_LIBRARY sqlite3)

# find_package(PNG REQUIRED)
# include_directories(${PNG_INCLUDE_DIR})

find_package (ZLIB)
if (ZLIB_FOUND)
  include_directories(${ZLIB_INCLUDE_DIR})
endif (ZLIB_FOUND)

IF (STATIC)
	message("Brewing a static build ...")
	SET(CMAKE_EXE_LINKER_FLAGS "-static-libstdc++ -static-libgcc --disable-shared --enable-static")
	SET(CMAKE_SHARED_LINKER_FLAGS "-static-libstdc++ -static-libgcc --disable-shared --enable-static")
ENDIF ()

IF (PROFILE)
	message("including profiling information")
	SET(CMAKE_C_FLAGS_RELEASE "-pg ${CMAKE_C_FLAGS_RELEASE}")
	SET(CMAKE_CXX_FLAGS_RELEASE "-pg ${CMAKE_CXX_FLAGS_RELEASE}")
	SET(CMAKE_EXE_LINKER_FLAGS "-pg ${CMAKE_EXE_LINKER_FLAGS}")
	message("flags with profiling: " ${CMAKE_CXX_FLAGS_RELEASE} )
ENDIF ()


execute_process(COMMAND "git" "rev-parse" "HEAD" OUTPUT_VARIABLE GIT_HASH)
string(STRIP ${GIT_HASH} GIT_HASH)
execute_process(COMMAND "git" "rev-parse" "--abbrev-ref" "HEAD" OUTPUT_VARIABLE GIT_BRANCH)
string(STRIP ${GIT_BRANCH} GIT_BRANCH)
string(TIMESTAMP GIT_TIMESTAMP "%Y-%m-%d %H:%M:%S")

configure_file("${CMAKE_SOURCE_DIR}/src/core/SURPASSversion.cc.in" "${CMAKE_SOURCE_DIR}/src/core/SURPASSversion.cc")

#set (SSE_FLAGS  " -msse -msse2 -msse3 -msse4 -mavx -mavx2 ")
set (SSE_FLAGS  " -march=native ")
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	message("Compiling with clang")
	set (CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG -std=c++0x -Wall ${SSE_FLAGS} ")
	set (CMAKE_CXX_FLAGS_RELEASE "-flto -Wall -O3 -std=c++0x -ffast-math ${SSE_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
	set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_RELEASE})
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	    set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG})
	endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	message("Compiling with g++")
	set (CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG -pthread -O1 -std=c++0x -Wall ${SSE_FLAGS}")
	set (CMAKE_CXX_FLAGS_RELEASE "-Wall -O3 -pthread -std=c++0x  ${SSE_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
	set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_RELEASE})
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	    set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG})
	endif()
	if (PROFILE)
    	    message("including profiling information")
    	    SET(CMAKE_C_FLAGS_RELEASE "-pg ${CMAKE_C_FLAGS_RELEASE}")
	    SET(CMAKE_CXX_FLAGS_RELEASE "-pg ${CMAKE_CXX_FLAGS_RELEASE}")
	    SET(CMAKE_EXE_LINKER_FLAGS "-pg ${CMAKE_EXE_LINKER_FLAGS}")
	    message("flags with profiling: " ${CMAKE_CXX_FLAGS_RELEASE} )
	endif ()
	message("flags: " ${CMAKE_CXX_FLAGS} )
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
	message("Compiling with icc")
	set (CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG -O1 -std=c++0x ")
	set (CMAKE_CXX_FLAGS_RELEASE "-Wall -O3 -std=c++0x ${CMAKE_CXX_FLAGS_RELEASE}")
	set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_RELEASE})
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	    set (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG})
	endif()
	message("flags: " ${CMAKE_CXX_FLAGS} )
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
	message("Compiling with mvcc")
	set (CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG -O1 -std=c++0x")
	set (CMAKE_CXX_FLAGS_RELEASE "-Wall -O3 -std=c++0x -msse -msse2 -msse3 -msse4 -mavx -mavx2 ${CMAKE_CXX_FLAGS_RELEASE}")
endif()



include_directories(${PROJECT_SOURCE_DIR}/src)

add_subdirectory (src)
