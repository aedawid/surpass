#ifndef CORE_CALC_STATISTICS_Random_HH
#define CORE_CALC_STATISTICS_Random_HH

#include <random>
#include <core/real.hh>
#include <utils/Logger.hh>

namespace core {
namespace calc {
namespace statistics {

/**\brief Random number engine implemented as a singleton for repeatable results.
 *
 * User should use this engine to create a random distribution, as he would normally do
 * with any other C++11 engine.
 */
class Random {
public :

  /// type of values returned by this random generator engine
  typedef std::mt19937_64::result_type result_type;

  /// Returns the reference to the engine singleton
  static Random &get() {
    static Random instance;
    return instance;
  }

  static void seed(const result_type seed) {
    logger << utils::LogLevel::INFO << "Random generator seeded with " << result_type(seed) << "\n";
    get().generator.seed(seed);
  }

  /** \brief Generates a new random value.
   *
   * The returned value is of the <code>result_type</code> type and from the range [0,max())
   */
  result_type operator()() { return generator(); }

  /// Returns the maximum value that may be generated by this engine
  constexpr static result_type max() { return std::mt19937_64::max(); }

  /// Returns the minimum value that may be generated by this engine
  constexpr static result_type min() { return std::mt19937_64::min(); }

private:
  std::mt19937_64 generator;
  static Random manager; // will become (once Apple fixes clang) : static thread_local Random manager;
  static utils::Logger logger;
};

}
}
}

#endif
